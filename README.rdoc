= rs_ci_app_rails

This is a very simple Rails4 app which will display the current git commit SHA of the application.

It also has a /deploy controller which will make API calls to RightScale to
deploy a new build SHA of the application.  The deploy controller is designed
to accept webhooks from Travis CI and consumes only the "commit" property of
json payload[https://gist.github.com/svenfuchs/1225015]

{<img src="https://travis-ci.org/rgeyer/rs_ci_app_rails.png" />}[https://travis-ci.org/rgeyer/rs_ci_app_rails]

== Usage

If you've got everything setup, which I cover below, you can kick off a new
build and deployment with the following command.


    rake ci:deploy["Your commit/deploy message"]


That will append a line to continuous_deployment.changelog.markdown and commit
the change to GitHub, kicking off the process, which looks like this.

{<img src="https://raw.githubusercontent.com/rgeyer/rs_ci_app_rails/master/readme_statics/images/flow.png" />}[https://raw.githubusercontent.com/rgeyer/rs_ci_app_rails/master/readme_statics/images/flow.png]

If you don't have a working environment, here's what you'll need to do.

=== Launch rs_ci_app_rails VM

You're going to need to fire up an instance of this rs_ci_app_rails application
which will accept the webhooks from TravisCI.

Fortunately, there is a RightScale ServerTemplate[https://github.com/rgeyer/rs_ci_app_rails/master/README.rdoc#servertemplate]
for running the app, which should make it pretty easy.

=== Fork on GitHub

You'll want your own fork of the rs_ci_app_rails repository so that you can commit
to it and kick off the CD workflow.  See how to do that on GitHub here[https://help.github.com/articles/fork-a-repo].

While you're at it, if you haven't already set your git global user.email and
user.name, you should now, since the rake task will use them to add a new record
to continuous_deployment.changelog.markdown.  See how here[https://help.github.com/articles/setting-your-email-in-git].

=== Enable GitHub Webhook

Instructions here[http://docs.travis-ci.com/user/getting-started/#Step-two%3A-Activate-GitHub-Webhook]

=== Setup TravisCI Webhook

Once you've got your own fork of the repository, and you've told github to call
TravisCI on new commits, you'll want to modify the .travis.yml to point to your
instance of rs_ci_app_rails.

Simply change the URL line in the .travis.yml file to match the following.

    http://#{environment}-#{fqdn}/deploy?environment=#{environment}

Yes, the environment is listed twice, and this is by design.  You could use your
production instance of rs_ci_app_rails to deploy to your development instance
of rs_ci_app_rails.

== ServerTemplate

{Here it is}[http://www.rightscale.com/library/server_templates/rs_ci_app_rails/lineage/48311]

== Cookbook

Check out it's README[https://github.com/rgeyer/rs_ci_app_rails/master/cookbook-rs_ci_app_rails/README.md]

== Vagrant

There is a hacky Vagrantfile in place, which is intended to emulate the ServerTemplate[https://github.com/rgeyer/rs_ci_app_rails/master/README.rdoc#servertemplate] but is currently not working.

== TODO

- Self signed cert and basic authentication
- Ability to deploy to a new instance, rather than updating an existing one (depends upon rs-mule[https://github.com/rgeyer/rs-mule] support).
- "Dockerize" the application, and possibly the whole CI process?
